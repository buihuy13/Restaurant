spring.application.name=restaurant-service

#Swagger
springdoc.api-docs.path=/v3/api-docs/restaurant-service
springdoc.swagger-ui.enabled=false
springdoc.info.title=Restaurant Service API
springdoc.info.description=API documentation for Restaurant Service
springdoc.info.version=1.0.0
springdoc.info.contact.name=Huy

spring.config.import=optional:file:.env[.properties]

server.port=${PORT}
eureka.client.service-url.defaultZone=${EUREKA_SERVER_URL}
#eureka.instance.hostname=${spring.application.name}
#eureka.instance.prefer-ip-address=false
#eureka.instance.instance-id=${spring.application.name}:${random.value}

# Chỉ dùng zipkin khi deploy lên docker
# management.tracing.enabled=true
# Mở tất cả các endpoint của Actuator (health, metrics, zipkin...) qua web
# management.endpoints.web.exposure.include=*
#100% request sẽ được thu thập và gửi đi.
# management.tracing.sampling.probability=1.0
# endpoint của zipkin server
# management.zipkin.tracing.endpoint=${ZIPKIN_ENDPOINT}

spring.datasource.url=${RESTAURANT_SERVICE_DB_URL}
spring.datasource.username=${RESTAURANT_SERVICE_DB_USER}
spring.datasource.password=${RESTAURANT_SERVICE_DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#spring.kafka.bootstrap-servers=${KAFKA_SERVER}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

#Cloudinary
CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}

#Resilinece4j Properties
resilience4j.circuitbreaker.instances.create.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.create.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.create.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.create.slidingWindowSize=20
resilience4j.circuitbreaker.instances.create.failureRateThreshold=50
resilience4j.circuitbreaker.instances.create.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.create.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.create.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4J Timeout Properties
resilience4j.timelimiter.instances.create.timeout-duration=3s

#Resilience4J Retry Properties
resilience4j.retry.instances.create.max-attempts=3
resilience4j.retry.instances.create.wait-duration=1s

#OpenRouteService
OPENROUTESERVICE_API_KEY=${OPENROUTESERVICE_API_KEY}
OPENROUTESERVICE_URL=${OPENROUTESERVICE_URL}